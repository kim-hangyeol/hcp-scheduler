/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "hcp-pkg/apis/resource/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HCPHybridAutoScalerLister helps list HCPHybridAutoScalers.
// All objects returned here must be treated as read-only.
type HCPHybridAutoScalerLister interface {
	// List lists all HCPHybridAutoScalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HCPHybridAutoScaler, err error)
	// HCPHybridAutoScalers returns an object that can list and get HCPHybridAutoScalers.
	HCPHybridAutoScalers(namespace string) HCPHybridAutoScalerNamespaceLister
	HCPHybridAutoScalerListerExpansion
}

// hCPHybridAutoScalerLister implements the HCPHybridAutoScalerLister interface.
type hCPHybridAutoScalerLister struct {
	indexer cache.Indexer
}

// NewHCPHybridAutoScalerLister returns a new HCPHybridAutoScalerLister.
func NewHCPHybridAutoScalerLister(indexer cache.Indexer) HCPHybridAutoScalerLister {
	return &hCPHybridAutoScalerLister{indexer: indexer}
}

// List lists all HCPHybridAutoScalers in the indexer.
func (s *hCPHybridAutoScalerLister) List(selector labels.Selector) (ret []*v1alpha1.HCPHybridAutoScaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HCPHybridAutoScaler))
	})
	return ret, err
}

// HCPHybridAutoScalers returns an object that can list and get HCPHybridAutoScalers.
func (s *hCPHybridAutoScalerLister) HCPHybridAutoScalers(namespace string) HCPHybridAutoScalerNamespaceLister {
	return hCPHybridAutoScalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HCPHybridAutoScalerNamespaceLister helps list and get HCPHybridAutoScalers.
// All objects returned here must be treated as read-only.
type HCPHybridAutoScalerNamespaceLister interface {
	// List lists all HCPHybridAutoScalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HCPHybridAutoScaler, err error)
	// Get retrieves the HCPHybridAutoScaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HCPHybridAutoScaler, error)
	HCPHybridAutoScalerNamespaceListerExpansion
}

// hCPHybridAutoScalerNamespaceLister implements the HCPHybridAutoScalerNamespaceLister
// interface.
type hCPHybridAutoScalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HCPHybridAutoScalers in the indexer for a given namespace.
func (s hCPHybridAutoScalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HCPHybridAutoScaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HCPHybridAutoScaler))
	})
	return ret, err
}

// Get retrieves the HCPHybridAutoScaler from the indexer for a given namespace and name.
func (s hCPHybridAutoScalerNamespaceLister) Get(name string) (*v1alpha1.HCPHybridAutoScaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hcphybridautoscaler"), name)
	}
	return obj.(*v1alpha1.HCPHybridAutoScaler), nil
}
