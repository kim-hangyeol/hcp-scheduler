/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/KETI-Hybrid/hcp-pkg/apis/resource/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HCPDeploymentLister helps list HCPDeployments.
// All objects returned here must be treated as read-only.
type HCPDeploymentLister interface {
	// List lists all HCPDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HCPDeployment, err error)
	// HCPDeployments returns an object that can list and get HCPDeployments.
	HCPDeployments(namespace string) HCPDeploymentNamespaceLister
	HCPDeploymentListerExpansion
}

// hCPDeploymentLister implements the HCPDeploymentLister interface.
type hCPDeploymentLister struct {
	indexer cache.Indexer
}

// NewHCPDeploymentLister returns a new HCPDeploymentLister.
func NewHCPDeploymentLister(indexer cache.Indexer) HCPDeploymentLister {
	return &hCPDeploymentLister{indexer: indexer}
}

// List lists all HCPDeployments in the indexer.
func (s *hCPDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.HCPDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HCPDeployment))
	})
	return ret, err
}

// HCPDeployments returns an object that can list and get HCPDeployments.
func (s *hCPDeploymentLister) HCPDeployments(namespace string) HCPDeploymentNamespaceLister {
	return hCPDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HCPDeploymentNamespaceLister helps list and get HCPDeployments.
// All objects returned here must be treated as read-only.
type HCPDeploymentNamespaceLister interface {
	// List lists all HCPDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HCPDeployment, err error)
	// Get retrieves the HCPDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HCPDeployment, error)
	HCPDeploymentNamespaceListerExpansion
}

// hCPDeploymentNamespaceLister implements the HCPDeploymentNamespaceLister
// interface.
type hCPDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HCPDeployments in the indexer for a given namespace.
func (s hCPDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HCPDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HCPDeployment))
	})
	return ret, err
}

// Get retrieves the HCPDeployment from the indexer for a given namespace and name.
func (s hCPDeploymentNamespaceLister) Get(name string) (*v1alpha1.HCPDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hcpdeployment"), name)
	}
	return obj.(*v1alpha1.HCPDeployment), nil
}
